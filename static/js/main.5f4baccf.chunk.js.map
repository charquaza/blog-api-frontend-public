{"version":3,"sources":["components/Header.js","components/Post.js","components/Home.js","components/Comment.js","components/CommentForm.js","components/PostDetail.js","components/SignUpForm.js","components/LogInForm.js","components/Authentication.js","components/NotFound.js","App.js","index.js"],"names":["Header","props","useState","logOut","setLogOut","useEffect","localStorage","removeItem","setCurrUser","navLinks","currUser","to","greeting","first_name","last_name","username","onClick","Post","postData","author","_id","title","timestamp","content","Home","PostComponentList","postList","map","post","Comment","commentData","isAdminOrAuthor","is_admin","editMode","setEditMode","willUpdate","setWillUpdate","willDelete","setWillDelete","serverErrors","setServerErrors","inputValues","setInputValues","commentUrl","apiURL","fetchOptions","method","headers","getItem","body","JSON","stringify","mode","fetch","then","res","json","data","Error","errors","ReactDOM","unstable_batchedUpdates","setDataNeedsUpdate","catch","err","console","log","message","onSubmit","e","preventDefault","id","name","required","value","onChange","inputElem","target","prevState","CommentForm","formSubmitted","setFormSubmitted","formErrors","setFormErrors","newCommentUrl","postId","ok","status","htmlFor","type","length","PostDetail","setPostData","commentList","setCommentList","fetchError","setFetchError","dataNeedsUpdate","urlParams","useParams","postURL","commentsURL","commentComponents","comment","SignUpForm","password","confirm_password","handleInputChange","setItem","user","token","maxLength","LogInForm","Authentication","heading","form","location","useLocation","pathname","NotFound","App","parse","setPostList","exact","path","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f4baccf.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Header(props) {\n    const [logOut, setLogOut] = useState(false);\n\n    useEffect(() => {\n        if (!logOut) {\n            return;\n        }\n        \n        //clear user info from localStorage\n        localStorage.removeItem('user');\n        localStorage.removeItem('token');\n\n        //re-render app\n        setLogOut(false);\n        props.setCurrUser(null);\n    });\n\n    var navLinks = (props.currUser) \n        ? [\n            <li key='home'><Link to='/'>Home</Link></li>,\n        ]\n        : [\n            <li key='home'><Link to='/'>Home</Link></li>,\n            <li key='signup'><Link to='/sign-up'>Sign Up</Link></li>, \n            <li key='login'><Link to='/log-in'>Log In</Link></li>\n        ];\n    \n    var greeting = (props.currUser)\n        ? <>\n            <p>\n                Welcome, {props.currUser.first_name}\n                &nbsp;{props.currUser.last_name}\n                &nbsp;({props.currUser.username})\n            </p>\n            <button onClick={handleLogOut}>Log Out</button>\n        </>\n        : null;\n    \n    function handleLogOut() {\n        setLogOut(true);\n    }\n\n    return (\n        <header>\n            <h1>The Blog</h1>\n            {greeting}\n            <nav>\n                <ul>\n                    {navLinks}\n                </ul>\n            </nav>\n        </header>\n    );\n}\n\nexport default Header;","import { Link } from 'react-router-dom';\n\nfunction Post(props) {\n    var postData = props.postData;\n    var author = postData.author;\n\n    return (\n        <ul>\n            <li><h3><Link to={'/posts/' + postData._id}>{postData.title}</Link></h3></li>\n            <li>\n                {author.username} ({author.first_name} {author.last_name}) {postData.timestamp}\n            </li>\n            <li>{postData.content}</li>\n        </ul>\n    );\n}\n\nexport default Post;","import Post from \"../components/Post\";\n\nfunction Home(props) {\n    var PostComponentList = props.postList.map((post) => {\n        return (\n            <li key={post._id}>\n                <Post postData={post} />\n            </li>\n        );\n    });\n    \n    return (\n        <main>\n            <h2>Welcome to <em>The Blog</em></h2>\n            <ul>{PostComponentList}</ul>\n        </main>\n    );\n}\n\nexport default Home;","import ReactDOM from 'react-dom';\nimport { useState, useEffect } from 'react';\n\nfunction Comment(props) {\n    var currUser = props.currUser;\n    var commentData = props.commentData;\n    var author = commentData.author;\n\n    var isAdminOrAuthor = currUser && \n        (currUser.is_admin || currUser._id === author._id);\n\n    const [editMode, setEditMode] = useState(false);\n    const [willUpdate, setWillUpdate] = useState(false);  \n    const [willDelete, setWillDelete] = useState(false);\n    const [serverErrors, setServerErrors] = useState(null);\n    const [inputValues, setInputValues] = useState({ content: commentData.content });\n\n    useEffect(function updateComment() {\n        if (!willUpdate) {\n            return;\n        }\n\n        var commentUrl = props.apiURL + '/posts/' + commentData.post + '/comments/' + commentData._id;\n        var fetchOptions = {\n            method: 'PUT',\n            headers: { \n                'Authorization': 'Bearer ' + localStorage.getItem('token'),\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(inputValues),\n            mode: 'cors'\n        };\n\n        fetch(commentUrl, fetchOptions)\n            .then((res) => {\n                return res.json();\n            })\n            .then((data) => {\n                if (!data) {\n                    throw new Error('Server error');\n                } else if (data.errors) {\n                    ReactDOM.unstable_batchedUpdates(() => {\n                        setServerErrors(data.errors);\n                        setWillUpdate(false);\n                    });\n                } else {\n                    ReactDOM.unstable_batchedUpdates(() => {\n                        setWillUpdate(false);\n                        setEditMode(false);\n                    });\n                    props.setDataNeedsUpdate(true);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                ReactDOM.unstable_batchedUpdates(() => {\n                    setServerErrors([err.message]);\n                    setWillUpdate(false);\n                });\n            });\n    });\n\n    useEffect(function deleteComment() {\n        if (!willDelete) {\n            return;\n        }\n\n        var commentUrl = props.apiURL + '/posts/' + commentData.post + '/comments/' + commentData._id;\n        var fetchOptions = {\n            method: 'DELETE',\n            headers: { 'Authorization': 'Bearer ' + localStorage.getItem('token') },\n            mode: 'cors'\n        };\n\n        fetch(commentUrl, fetchOptions)\n            .then((res) => {\n                return res.json();\n            })\n            .then((data) => {\n                if (!data) {\n                    throw new Error('Server error');\n                } else if (data.errors) {\n                    ReactDOM.unstable_batchedUpdates(() => {\n                        setServerErrors(data.errors);\n                        setWillDelete(false);\n                    });\n                } else {\n                    setWillDelete(false);\n                    props.setDataNeedsUpdate(true);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                ReactDOM.unstable_batchedUpdates(() => {\n                    setServerErrors([err.message]);\n                    setWillDelete(false);\n                });\n            });\n    });\n\n    function enterEditMode(e) {\n        setEditMode(true);\n        setServerErrors(null);\n    }\n    function exitEditMode() {\n        setEditMode(false);\n        setServerErrors(null);\n        setInputValues({ content: commentData.content });\n    }\n\n    function handleSubmitUpdate(e) {\n        e.preventDefault();\n\n        setWillUpdate(true);\n        setWillDelete(false);\n        setServerErrors(null);\n    }\n    function handleClickDelete() {\n        setWillDelete(true);\n        setWillUpdate(false);\n        setServerErrors(null);\n    }\n\n    function handleInputChange(e) {\n        var inputElem = e.target;\n        setInputValues((prevState) => {\n            return { ...prevState, [inputElem.name]: inputElem.value };\n        });\n    }\n\n    return (\n        <div>\n            <ul>\n                <li>{author.username} ({author.first_name} {author.last_name}) {commentData.timestamp}</li>\n                <li>\n                    {editMode\n                        ? (\n                            <form onSubmit={handleSubmitUpdate}>\n                                <textarea id='content' name='content' required\n                                    value={inputValues.content} onChange={handleInputChange}\n                                ></textarea>\n                                <button>Save</button>\n                            </form>\n                        )\n                        : commentData.content\n                    }\n                </li>\n            </ul>\n\n            {serverErrors && \n                <ul>\n                    {serverErrors.map(err => <li key={err}>{err}</li>)}\n                </ul>\n            }\n\n            {/* render edit and delete buttons if current user is admin or author of comment \n                and comment delete or update request has not been sent to server */}\n            {(isAdminOrAuthor && (!willDelete && !willUpdate)) &&\n                (editMode \n                    ? (\n                        <>\n                            <button onClick={exitEditMode}>Cancel</button>\n                        </>\n                    )\n                    : (\n                        <>\n                            <button onClick={enterEditMode}>Edit</button>\n                            <button onClick={handleClickDelete}>Delete</button>\n                        </>\n                    )\n                )\n            }\n        </div>\n    );\n}\n\nexport default Comment;","import ReactDOM from 'react-dom';\nimport { useState, useEffect } from 'react'; \n\nfunction CommentForm(props) {\n    const [inputValues, setInputValues] = useState({ content: '' });\n    const [formSubmitted, setFormSubmitted] = useState(false);\n    const [formErrors, setFormErrors] = useState([]);\n\n    useEffect(function submitForm() {\n        if (!formSubmitted) {\n            return;\n        }\n\n        var fetchOptions = {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\n            },\n            body: JSON.stringify(inputValues),\n            mode: 'cors'\n        };\n        var newCommentUrl = props.apiURL + '/posts/' + props.postId + '/comments';\n\n        fetch(newCommentUrl, fetchOptions)\n            .then((res) => {\n                if (res.ok || res.status === 400) {\n                    return res.json();\n                } else {\n                    throw new Error('Server responded with: ' + res.status);\n                }\n            })\n            .then((data) => {\n                if (data.errors) {\n                    ReactDOM.unstable_batchedUpdates(() => {\n                        setFormErrors(data.errors);\n                        setFormSubmitted(false);    \n                    });\n                } else {\n                    ReactDOM.unstable_batchedUpdates(() => {\n                        setInputValues({ content: '' });    //clear new comment form\n                        setFormSubmitted(false);    \n                    });\n\n                    //re-render PostDetail component with new comment\n                    props.setDataNeedsUpdate(true);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                ReactDOM.unstable_batchedUpdates(() => {\n                    setFormErrors([err.message]);\n                    setFormSubmitted(false);    \n                });\n            });\n    });\n\n    function handleInputChange(e) {\n        var inputElem = e.target;\n        setInputValues((prevState) => {\n            return { ...prevState, [inputElem.name]: inputElem.value }; \n        });\n    }\n\n    function handleFormSubmit(e) {\n        e.preventDefault();\n        setFormErrors([]);  //clear error messages\n        setFormSubmitted(true);\n    }\n\n    return (\n        <>\n            <form onSubmit={handleFormSubmit}>\n                <label htmlFor='content'>New Comment: </label>\n                <textarea id='content' name='content' required\n                    value={inputValues.content} onChange={handleInputChange}\n                ></textarea>\n                <button type='submit'>Post Comment</button>\n            </form>\n\n            {formErrors.length > 0 &&\n                <ul>\n                    {formErrors.map(err => <li key={err}>{err}</li>)}\n                </ul>\n            }\n        </>\n    );\n}\n\nexport default CommentForm;","import ReactDOM from 'react-dom';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Comment from '../components/Comment';\nimport CommentForm from '../components/CommentForm';\n\nfunction PostDetail(props) {\n    const [postData, setPostData] = useState(null);\n    const [commentList, setCommentList] = useState([]);\n    const [fetchError, setFetchError] = useState(null);\n    const [dataNeedsUpdate, setDataNeedsUpdate] = useState(false);\n    const urlParams = useParams();\n    \n    useEffect(function getPost() {\n        //do not fetch data if:\n        //1. there was a previous fetch error, or\n        //2. initial fetch was successful and \n        //   dataNeedsUpdate === false, meaning rendered data is up-to-date\n        if (fetchError || (postData && !dataNeedsUpdate)) {\n            return;\n        }\n\n        var postURL = props.apiURL + '/posts/' + urlParams.id;\n\n        fetch(postURL, { method: 'GET', mode: 'cors' })\n            .then((res) => {\n                if (res.ok) {\n                    return res.json();\n                } else {\n                    throw new Error('Server responded with: ' + res.status);\n                }\n            })\n            .then((data) => {\n                ReactDOM.unstable_batchedUpdates(() => {\n                    setPostData(data.data);\n                    setDataNeedsUpdate(false);\n                });\n            })\n            .catch((err) => {\n                console.log(err);\n                setFetchError(err.message);\n            });\n    });\n\n    useEffect(function getComments() {\n        //do not fetch data if:\n        //1. there was a previous fetch error, or\n        //2. initial fetch was successful and \n        //   dataNeedsUpdate === false, meaning rendered data is up-to-date\n        if (fetchError || (postData && !dataNeedsUpdate)) {\n            return;\n        }\n\n        var commentsURL = props.apiURL + '/posts/' + urlParams.id + '/comments';\n\n        fetch(commentsURL, { method: 'GET', mode: 'cors' })\n            .then((res) => {\n                if (res.ok) {\n                    return res.json();\n                } else {\n                    throw new Error('Server responded with: ' + res.status);\n                }\n            })\n            .then((data) => {\n                setCommentList(data.data);\n            })\n            .catch((err) => {\n                console.log(err);\n                setFetchError(err.message);\n            });\n    });\n\n    var commentComponents = commentList.map((comment) => {\n        return (\n            <li key={comment._id}>\n                <Comment commentData={comment} currUser={props.currUser} \n                    apiURL={props.apiURL} setDataNeedsUpdate={setDataNeedsUpdate}\n                />\n            </li>\n        );\n    });\n    \n    return (\n        <main>\n            {fetchError\n                ? <p>{fetchError}</p>\n                : postData \n                ? \n                    <>\n                        <h2>{postData.title}</h2>\n\n                        {/* post info */}\n                        <ul>\n                            <li>\n                                {postData.author.username} ({postData.author.first_name} \n                                &nbsp;{postData.author.last_name}) {postData.timestamp}\n                            </li>\n                            <li>{postData.content}</li>\n                        </ul>\n\n                        {/* comment list */}\n                        <ul>\n                            {commentComponents}    \n                        </ul>\n\n                        {/* render new comment form if logged in */}\n                        {props.currUser && \n                            <CommentForm apiURL={props.apiURL} postId={urlParams.id} \n                                setDataNeedsUpdate={setDataNeedsUpdate}\n                            />\n                        }\n                    </>\n                : <p>Loading post...</p>\n            }\n        </main>\n    );\n}\n\nexport default PostDetail;","import ReactDOM from 'react-dom';\nimport { useState, useEffect } from 'react';\n\nfunction SignUpForm(props) {\n    const [inputValues, setInputValues] = useState(\n        {\n            first_name: '',\n            last_name: '',\n            username: '',\n            password: '',\n            confirm_password: ''\n        }\n    );\n    const [formSubmitted, setFormSubmitted] = useState(false);\n    const [formErrors, setFormErrors] = useState([]);\n\n    useEffect(function submitForm() {\n        if (!formSubmitted) {\n            return;\n        }\n\n        var fetchOptions = {\n            method: 'POST', \n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(inputValues),\n            mode: 'cors'\n        };\n\n        fetch(props.apiURL + '/sign-up', fetchOptions)\n            .then((res) => {\n                if (res.ok || res.status === 400) {\n                    return res.json();\n                } else {\n                    throw new Error('Server responded with: ' + res.status);\n                }\n            })\n            .then((data) => {\n                if (data.errors) {\n                    //force batched state update to avoid calling api twice\n                    ReactDOM.unstable_batchedUpdates(() => {\n                        setFormErrors(data.errors);\n                        setFormSubmitted(false);\n                    });\n                } else {\n                    //store user info in localStorage\n                    localStorage.setItem('user', JSON.stringify(data.user));\n                    localStorage.setItem('token', data.token);\n\n                    //re-render app\n                    props.setCurrUser(data.user);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                ReactDOM.unstable_batchedUpdates(() => {\n                    setFormErrors([err.message]);\n                    setFormSubmitted(false);\n                });\n            });\n    });\n\n    function handleInputChange(e) {\n        var inputElem = e.target;\n        setInputValues((prevState) => {\n            return { ...prevState, [inputElem.name]: inputElem.value };\n        });\n    }\n\n    function handleFormSubmit(e) {\n        e.preventDefault();\n        setFormErrors([]);  //clear error messages\n        setFormSubmitted(true);\n    }\n\n    return (\n        <>\n            <form onSubmit={handleFormSubmit}>\n                <label htmlFor='first_name'>First Name: </label>\n                <input type='text' id='first_name' name='first_name' required maxLength='100' \n                    value={inputValues.first_name} onChange={handleInputChange}\n                />\n\n                <label htmlFor='last_name'>Last Name: </label>\n                <input type='text' id='last_name' name='last_name' required maxLength='100' \n                    value={inputValues.last_name} onChange={handleInputChange}\n                />\n\n                <label htmlFor='username'>Username: </label>\n                <input type='text' id='username' name='username' required maxLength='100' \n                    value={inputValues.username} onChange={handleInputChange}\n                />\n\n                <label htmlFor='password'>Password: </label>\n                <input type='password' id='password' name='password' required \n                    value={inputValues.password} onChange={handleInputChange}\n                />\n\n                <label htmlFor='confirm_password'>Confirm Password: </label>\n                <input type='password' id='confirm_password' name='confirm_password' required \n                    value={inputValues.confirm_password} onChange={handleInputChange}\n                />\n\n                <button type='submit'>Sign Up</button>\n            </form>\n\n            {formErrors.length > 0 &&\n                <ul>\n                    {formErrors.map(err => <li key={err}>{err}</li>)}\n                </ul>\n            }\n        </>\n    );\n}\n\nexport default SignUpForm;","import ReactDOM from 'react-dom';\nimport { useState, useEffect } from 'react';\n\nfunction LogInForm(props) {\n    const [inputValues, setInputValues] = useState({ username: '', password: '' });\n    const [formSubmitted, setFormSubmitted] = useState(false);\n    const [formErrors, setFormErrors] = useState([]);\n\n    useEffect(function submitForm() {\n        if (!formSubmitted) {\n            return;\n        }\n\n        var fetchOptions = {\n            method: 'POST', \n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(inputValues), \n            mode: 'cors'\n        }\n\n        fetch(props.apiURL + '/log-in', fetchOptions)\n            .then((res) => {\n                if (res.ok || res.status === 401) {\n                    return res.json();\n                } else {\n                    throw new Error('Server responded with: ' + res.status);\n                }\n            })\n            .then((data) => {\n                if (data.errors) {\n                    //force batched state update to avoid calling api twice\n                    ReactDOM.unstable_batchedUpdates(() => {\n                        setFormErrors(data.errors);\n                        setFormSubmitted(false);\n                    });\n                } else {\n                    //store user info in localStorage\n                    localStorage.setItem('user', JSON.stringify(data.user));\n                    localStorage.setItem('token', data.token);\n\n                    //re-render app\n                    props.setCurrUser(data.user);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                ReactDOM.unstable_batchedUpdates(() => {\n                    setFormErrors([err.message]);\n                    setFormSubmitted(false);\n                });\n            });\n    });\n\n    function handleInputChange(e) {\n        var inputElem = e.target;\n        setInputValues((prevState) => {\n            return { ...prevState, [inputElem.name]: inputElem.value };\n        });\n    }\n\n    function handleFormSubmit(e) {\n        e.preventDefault();\n        setFormErrors([]);  //clear error messages\n        setFormSubmitted(true);\n    }\n\n    return (\n        <>\n            <form onSubmit={handleFormSubmit}>\n                <label htmlFor='username'>Username: </label>\n                <input type='text' id='username' name='username'  \n                    value={inputValues.username} required maxLength='100'\n                    onChange={handleInputChange} \n                />\n\n                <label htmlFor='password'>Password: </label>\n                <input type='password' id='password' name='password' \n                    value={inputValues.password} required \n                    onChange={handleInputChange}\n                />\n\n                <button type='submit'>Log In</button>\n            </form>\n\n            {formErrors.length > 0 &&\n                <ul>\n                    {formErrors.map(err => <li key={err}>{err}</li>)}\n                </ul>\n            }\n        </>\n    );\n}\n\nexport default LogInForm;","import { Redirect, useLocation } from 'react-router-dom';\nimport SignUpForm from '../components/SignUpForm';\nimport LogInForm from '../components/LogInForm';\n\nfunction Authentication(props) {\n    const location = useLocation();\n\n    if (props.currUser) {\n        return <Redirect to='/' />;\n    }\n\n    var heading;\n    var form;\n\n    if (location.pathname === '/sign-up') {\n        heading = 'Sign Up';\n        form = <SignUpForm apiURL={props.apiURL} setCurrUser={props.setCurrUser} />;\n    }\n\n    if (location.pathname === '/log-in') {\n        heading = 'Log In';\n        form = <LogInForm apiURL={props.apiURL} setCurrUser={props.setCurrUser} />;  \n    }\n\n    return (\n        <main>\n            <h2>{heading}</h2>\n            {form}\n        </main>\n    );\n}\n\nexport default Authentication;","function NotFound() {\n    return (\n        <main>\n            <h2>404: Not Found</h2>\n        </main>\n    );\n}\n\nexport default NotFound;\n\n","import { useState, useEffect } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport PostDetail from './components/PostDetail';\nimport Authentication from './components/Authentication';\nimport NotFound from './components/NotFound';\nimport './App.css';\n\nfunction App() {\n  const [currUser, setCurrUser] = useState(\n    localStorage.getItem('user') \n      ? JSON.parse(localStorage.getItem('user'))\n      : null\n  );\n  const [postList, setPostList] = useState([]);\n\n  const apiURL = 'http://localhost:3000';\n\n  useEffect(function getAllPosts() {\n    fetch(apiURL + '/posts', { method: 'GET', mode: 'cors' })\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          throw new Error('Server responded with: ' + res.status);\n        }\n      })\n      .then(res => setPostList(res.data))\n      .catch((err) => {\n        console.log(err);\n      });\n  }, [currUser]);\n\n  return (\n    <BrowserRouter>\n      <Header currUser={currUser} setCurrUser={setCurrUser} />\n      <Switch>\n        <Route exact path={['/sign-up', '/log-in']}>\n          <Authentication \n              currUser={currUser} setCurrUser={setCurrUser} \n              apiURL={apiURL}\n          /> \n        </Route>\n        <Route path='/posts/:id'>\n          <PostDetail apiURL={apiURL} currUser={currUser} />\n        </Route>\n        <Route exact path='/'>\n          <Home postList={postList} />\n        </Route>\n        <Route path='/'>\n          <NotFound />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}